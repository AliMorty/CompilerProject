
# parsing_table.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightTHENELSEID NUMCONST REALCONST BOOLCONST CHARCONST LT LE GT GE EQ NEQ LPAR RPAR LBRACK RBRACK LBRACE RBRACE PLUS MINUS MULT DIV MOD ASSIGNMENT_SIGN SEMICOLON DOUBLE_DOT COMMA COLON FOR PROGRAM UPTO ELSE AND WHEN CHAR THEN CASE WHILE DO REAL END IF DOWNTO RETURN BOOLEAN OR PROCEDURE NOT SWITCH INT EXIT MAIN DEFAULTprogram      : PROGRAM ID declarations_list procedure_list MAIN block\n                    | PROGRAM ID procedure_list MAIN block\n                    | PROGRAM ID declarations_list MAIN block\n                    | PROGRAM ID MAIN blockdeclarations_list    : declarations \n                            | declarations_list declarationsdeclarations     : type_specifiers declarator_list SEMICOLONtype_specifiers      : INT\n                            | REAL\n                            | CHAR\n                            | BOOLEANdeclarator_list      : declarator\n                            | declarator_list COMMA declaratordeclarator       : dec\n                        | dec ASSIGNMENT_SIGN initializerdec      : ID\n                | ID LBRACK range RBRACK\n                | ID LBRACK NUMCONST RBRACKrange        : ID DOUBLE_DOT ID\n                    | NUMCONST DOUBLE_DOT NUMCONST\n                    | arithmetic_expressions DOUBLE_DOT arithmetic_expressionsinitializer      : constant_expressions\n                        | LBRACE initializer_list RBRACEinitializer_list     : constant_expressions COMMA initializer_list\n                            | constant_expressionsprocedure_list       : procedure_list procedure_nt\n                            | procedure_ntprocedure_nt         : PROCEDURE ID parameters LBRACE declarations_list block RBRACE SEMICOLON\n                            | PROCEDURE ID parameters LBRACE block RBRACE SEMICOLONparameters       : LPAR declarations_list RPAR\n                        | LPAR RPARblock        : LBRACE statement_list RBRACEstatement_list       : statement SEMICOLON\n                            | statement_list statement SEMICOLONstatement            : ID ASSIGNMENT_SIGN expressions\n                            | IF bool_expressions THEN statement\n                            | IF bool_expressions THEN statement ELSE statement\n                            | DO statement WHILE bool_expressions\n                            | FOR ID ASSIGNMENT_SIGN counter DO statement\n                            | SWITCH expressions case_element default END\n                            | ID LPAR arguments_list RPAR\n                            | ID LBRACK expressions RBRACK ASSIGNMENT_SIGN expressions\n                            | RETURN expressions\n                            | EXIT WHEN bool_expressions\n                            | block\n                            | arguments_list       : multi_arguments\n                            | multi_arguments      : multi_arguments COMMA expressions \n                            | expressionscounter      : NUMCONST UPTO NUMCONST \n                    | NUMCONST DOWNTO NUMCONSTcase_element     : CASE NUMCONST COLON block\n                        | case_element CASE NUMCONST COLON blockdefault      : DEFAULT COLON block \n                    | expressions      : constant_expressions \n                        | bool_expressions \n                        | arithmetic_expressions\n                        | ID \n                        | ID LBRACK expressions RBRACK \n                        | ID LPAR arguments_list RPAR \n                        | LPAR expressions RPARconstant_expressions     : NUMCONST \n                                | REALCONST \n                                | CHARCONST \n                                | BOOLCONSTbool_expressions     : LT pair \n                            | LE pair \n                            | GT pair \n                            | GE pair \n                            | EQ pair \n                            | NEQ pair \n                            | AND pair \n                            | OR pair \n                            | AND THEN pair \n                            | OR ELSE pair \n                            | NOT expressionsarithmetic_expressions       : PLUS pair \n                                    | MINUS pair \n                                    | MULT pair \n                                    | DIV pair \n                                    | MOD pair \n                                    | MINUS expressionspair     : LPAR expressions COMMA expressions RPAR'

_lr_action_items = {'RPAR': (
[13, 21, 42, 45, 61, 62, 63, 67, 70, 72, 74, 75, 77, 91, 95, 96, 97, 99, 100, 101, 104, 105, 106, 109, 112, 113, 114,
 115, 116, 117, 118, 120, 121, 122, 138, 140, 143, 145, 146, 167, 168, 169, 178, 188, ],
[-5, -6, -7, 92, -57, -60, -65, -64, -59, -66, -58, -67, -48, 136, -68, -71, -69, -74, -78, -72, -75, -70, -73, -48,
 -84, -80, -83, 146, -82, -79, -81, 147, -47, -50, -76, -77, 167, 146, -63, -62, -61, -49, 188, -85, ]), 'MAIN': (
[3, 4, 5, 8, 13, 15, 19, 21, 42, 177, 187, ], [7, 16, -27, 20, -5, -26, 38, -6, -7, -29, -28, ]), 'MOD': (
[34, 36, 41, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 130, 148, 162, 170, ],
[65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, ]), 'NUMCONST': (
[34, 36, 40, 41, 52, 64, 66, 76, 77, 78, 83, 94, 107, 109, 110, 111, 124, 133, 148, 152, 155, 162, 164, 165, 170, ],
[67, 67, 67, 88, 67, 67, 67, 67, 67, 67, 67, 67, 141, 67, 67, 67, 150, 159, 67, 173, 67, 67, 180, 181, 67, ]),
                    'RBRACE': ([28, 46, 60, 63, 67, 72, 75, 93, 127, 128, 135, 160, 175, ],
                               [46, -32, -33, -65, -64, -66, -67, -34, -25, 156, 161, 176, -24, ]),
                    'IF': ([17, 28, 37, 60, 93, 102, 163, 166, ], [29, 29, 29, -33, -34, 29, 29, 29, ]),
                    'FOR': ([17, 28, 37, 60, 93, 102, 163, 166, ], [30, 30, 30, -33, -34, 30, 30, 30, ]), 'AND': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, ]),
                    'END': ([46, 125, 153, 184, 185, 189, ], [-32, -56, 174, -53, -55, -54, ]),
                    'WHEN': ([31, ], [59, ]),
                    'INT': ([3, 8, 13, 21, 42, 45, 90, 91, 134, ], [10, 10, -5, -6, -7, 10, 10, 10, 10, ]),
                    'BOOLEAN': ([3, 8, 13, 21, 42, 45, 90, 91, 134, ], [6, 6, -5, -6, -7, 6, 6, 6, 6, ]), 'RBRACK': (
    [61, 62, 63, 67, 70, 72, 74, 75, 87, 88, 95, 96, 97, 99, 100, 101, 104, 105, 106, 112, 113, 114, 116, 117, 118, 123,
     138, 140, 144, 146, 157, 158, 159, 167, 168, 188, ],
    [-57, -60, -65, -64, -59, -66, -58, -67, 131, 132, -68, -71, -69, -74, -78, -72, -75, -70, -73, -84, -80, -83, -82,
     -79, -81, 149, -76, -77, 168, -63, -19, -21, -20, -62, -61, -85, ]),
                    'REAL': ([3, 8, 13, 21, 42, 45, 90, 91, 134, ], [14, 14, -5, -6, -7, 14, 14, 14, 14, ]), 'EQ': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, ]), 'DOWNTO': ([141, ], [164, ]), 'THEN': (
    [51, 54, 61, 62, 63, 67, 70, 72, 74, 75, 95, 96, 97, 99, 100, 101, 104, 105, 106, 112, 113, 114, 116, 117, 118, 138,
     140, 146, 167, 168, 188, ],
    [98, 102, -57, -60, -65, -64, -59, -66, -58, -67, -68, -71, -69, -74, -78, -72, -75, -70, -73, -84, -80, -83, -82,
     -79, -81, -76, -77, -63, -62, -61, -85, ]), 'COLON': ([150, 151, 173, ], [171, 172, 186, ]), 'GE': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, ]), 'ELSE': (
    [32, 46, 55, 61, 62, 63, 67, 70, 71, 72, 74, 75, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 108, 112, 113, 114,
     116, 117, 118, 119, 138, 139, 140, 146, 147, 154, 163, 166, 167, 168, 174, 179, 182, 183, 188, ],
    [-45, -32, 103, -57, -60, -65, -64, -59, -43, -66, -58, -67, -68, -71, -69, -74, -78, -72, -46, -75, -70, -73, -44,
     -84, -80, -83, -82, -79, -81, -35, -76, 163, -77, -63, -41, -38, -46, -46, -62, -61, -40, -37, -39, -42, -85, ]),
                    'RETURN': ([17, 28, 37, 60, 93, 102, 163, 166, ], [34, 34, 34, -33, -34, 34, 34, 34, ]),
                    'ASSIGNMENT_SIGN': ([22, 24, 35, 58, 131, 132, 149, ], [40, -16, 76, 107, -17, -18, 170, ]), 'GT': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, ]), 'BOOLCONST': (
    [34, 36, 40, 52, 64, 66, 76, 77, 78, 83, 94, 109, 110, 111, 148, 155, 162, 170, ],
    [75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, ]), 'CHARCONST': (
    [34, 36, 40, 52, 64, 66, 76, 77, 78, 83, 94, 109, 110, 111, 148, 155, 162, 170, ],
    [72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, ]), 'DOUBLE_DOT': (
    [61, 62, 63, 67, 70, 72, 74, 75, 85, 86, 88, 95, 96, 97, 99, 100, 101, 104, 105, 106, 112, 113, 114, 116, 117, 118,
     138, 140, 146, 167, 168, 188, ],
    [-57, -60, -65, -64, -59, -66, -58, -67, 129, 130, 133, -68, -71, -69, -74, -78, -72, -75, -70, -73, -84, -80, -83,
     -82, -79, -81, -76, -77, -63, -62, -61, -85, ]), 'SEMICOLON': (
    [17, 22, 23, 24, 25, 28, 32, 33, 46, 47, 60, 61, 62, 63, 67, 70, 71, 72, 74, 75, 82, 84, 89, 93, 95, 96, 97, 99,
     100, 101, 102, 104, 105, 106, 108, 112, 113, 114, 116, 117, 118, 119, 131, 132, 138, 139, 140, 146, 147, 154, 156,
     161, 163, 166, 167, 168, 174, 176, 179, 182, 183, 188, ],
    [-46, -14, -12, -16, 42, -46, -45, 60, -32, 93, -33, -57, -60, -65, -64, -59, -43, -66, -58, -67, -22, -15, -13,
     -34, -68, -71, -69, -74, -78, -72, -46, -75, -70, -73, -44, -84, -80, -83, -82, -79, -81, -35, -17, -18, -76, -36,
     -77, -63, -41, -38, -23, 177, -46, -46, -62, -61, -40, 187, -37, -39, -42, -85, ]), 'MULT': (
    [34, 36, 41, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 130, 148, 162, 170, ],
    [73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, ]), 'REALCONST': (
    [34, 36, 40, 52, 64, 66, 76, 77, 78, 83, 94, 109, 110, 111, 148, 155, 162, 170, ],
    [63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, ]), 'PROCEDURE': (
    [3, 4, 5, 8, 13, 15, 19, 21, 42, 177, 187, ], [12, 12, -27, 12, -5, -26, 12, -6, -7, -29, -28, ]), 'LE': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, ]),
                    'DEFAULT': ([46, 125, 184, 189, ], [-32, 151, -53, -54, ]), 'MINUS': (
    [34, 36, 41, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 130, 148, 162, 170, ],
    [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, ]), 'LPAR': (
    [26, 34, 35, 36, 48, 49, 50, 51, 52, 53, 55, 56, 57, 62, 64, 65, 66, 68, 69, 73, 76, 77, 78, 94, 98, 103, 109, 110,
     111, 148, 162, 170, ],
    [45, 66, 77, 66, 94, 94, 94, 94, 66, 94, 94, 94, 94, 109, 111, 94, 66, 94, 94, 94, 66, 66, 66, 66, 94, 94, 66, 66,
     66, 66, 66, 66, ]), 'LBRACK': ([24, 35, 62, ], [41, 78, 110, ]), 'CASE': (
    [46, 61, 62, 63, 67, 70, 72, 74, 75, 79, 95, 96, 97, 99, 100, 101, 104, 105, 106, 112, 113, 114, 116, 117, 118, 125,
     138, 140, 146, 167, 168, 184, 188, 189, ],
    [-32, -57, -60, -65, -64, -59, -66, -58, -67, 124, -68, -71, -69, -74, -78, -72, -75, -70, -73, -84, -80, -83, -82,
     -79, -81, 152, -76, -77, -63, -62, -61, -53, -85, -54, ]), 'WHILE': (
    [32, 37, 46, 61, 62, 63, 67, 70, 71, 72, 74, 75, 80, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 108, 112, 113,
     114, 116, 117, 118, 119, 138, 139, 140, 146, 147, 154, 163, 166, 167, 168, 174, 179, 182, 183, 188, ],
    [-45, -46, -32, -57, -60, -65, -64, -59, -43, -66, -58, -67, 126, -68, -71, -69, -74, -78, -72, -46, -75, -70, -73,
     -44, -84, -80, -83, -82, -79, -81, -35, -76, -36, -77, -63, -41, -38, -46, -46, -62, -61, -40, -37, -39, -42,
     -85, ]), 'NOT': ([29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
                      [52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, ]),
                    '$end': ([1, 18, 27, 39, 46, 81, ], [0, -4, -2, -3, -32, -1, ]), 'DIV': (
    [34, 36, 41, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 130, 148, 162, 170, ],
    [68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, ]), 'PLUS': (
    [34, 36, 41, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 130, 148, 162, 170, ],
    [69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, ]), 'LT': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, ]),
                    'EXIT': ([17, 28, 37, 60, 93, 102, 163, 166, ], [31, 31, 31, -33, -34, 31, 31, 31, ]), 'COMMA': (
    [22, 23, 24, 25, 61, 62, 63, 67, 70, 72, 74, 75, 82, 84, 89, 95, 96, 97, 99, 100, 101, 104, 105, 106, 112, 113, 114,
     116, 117, 118, 121, 122, 127, 131, 132, 137, 138, 140, 145, 146, 156, 167, 168, 169, 188, ],
    [-14, -12, -16, 43, -57, -60, -65, -64, -59, -66, -58, -67, -22, -15, -13, -68, -71, -69, -74, -78, -72, -75, -70,
     -73, -84, -80, -83, -82, -79, -81, 148, -50, 155, -17, -18, 162, -76, -77, 162, -63, -23, -62, -61, -49, -85, ]),
                    'SWITCH': ([17, 28, 37, 60, 93, 102, 163, 166, ], [36, 36, 36, -33, -34, 36, 36, 36, ]),
                    'UPTO': ([141, ], [165, ]), 'NEQ': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, ]), 'DO': (
    [17, 28, 37, 60, 93, 102, 142, 163, 166, 180, 181, ], [37, 37, 37, -33, -34, 37, 166, 37, 37, -52, -51, ]), 'ID': (
    [2, 6, 9, 10, 11, 12, 14, 17, 28, 30, 34, 36, 37, 41, 43, 52, 60, 64, 66, 76, 77, 78, 93, 94, 102, 109, 110, 111,
     129, 148, 162, 163, 166, 170, ],
    [3, -11, -10, -8, 24, 26, -9, 35, 35, 58, 62, 62, 35, 85, 24, 62, -33, 62, 62, 62, 62, 62, -34, 62, 35, 62, 62, 62,
     157, 62, 62, 35, 35, 62, ]), 'PROGRAM': ([0, ], [2, ]), 'LBRACE': (
    [7, 13, 16, 17, 20, 21, 28, 37, 38, 40, 42, 44, 60, 90, 92, 93, 102, 134, 136, 163, 166, 171, 172, 186, ],
    [17, -5, 17, 17, 17, -6, 17, 17, 17, 83, -7, 90, -33, 17, -31, -34, 17, 17, -30, 17, 17, 17, 17, 17, ]),
                    'CHAR': ([3, 8, 13, 21, 42, 45, 90, 91, 134, ], [9, 9, -5, -6, -7, 9, 9, 9, 9, ]), 'OR': (
    [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
    [55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'dec': ([11, 43, ], [22, 22, ]), 'constant_expressions': (
[34, 36, 40, 52, 64, 66, 76, 77, 78, 83, 94, 109, 110, 111, 148, 155, 162, 170, ],
[61, 61, 82, 61, 61, 61, 61, 61, 61, 127, 61, 61, 61, 61, 61, 127, 61, 61, ]), 'statement_list': ([17, ], [28, ]),
                  'procedure_nt': ([3, 4, 8, 19, ], [5, 15, 5, 15, ]), 'declarator': ([11, 43, ], [23, 89, ]),
                  'arguments_list': ([77, 109, ], [120, 143, ]), 'case_element': ([79, ], [125, ]),
                  'initializer': ([40, ], [84, ]),
                  'type_specifiers': ([3, 8, 45, 90, 91, 134, ], [11, 11, 11, 11, 11, 11, ]), 'program': ([0, ], [1, ]),
                  'counter': ([107, ], [142, ]),
                  'statement': ([17, 28, 37, 102, 163, 166, ], [33, 47, 80, 139, 179, 182, ]),
                  'declarations': ([3, 8, 45, 90, 91, 134, ], [13, 21, 13, 13, 21, 21, ]),
                  'procedure_list': ([3, 8, ], [4, 19, ]), 'arithmetic_expressions': (
    [34, 36, 41, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 130, 148, 162, 170, ],
    [70, 70, 86, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 158, 70, 70, 70, ]),
                  'multi_arguments': ([77, 109, ], [121, 121, ]), 'range': ([41, ], [87, ]),
                  'declarations_list': ([3, 45, 90, ], [8, 91, 134, ]), 'parameters': ([26, ], [44, ]),
                  'bool_expressions': (
                  [29, 34, 36, 52, 59, 64, 66, 76, 77, 78, 94, 109, 110, 111, 126, 148, 162, 170, ],
                  [54, 74, 74, 74, 108, 74, 74, 74, 74, 74, 74, 74, 74, 74, 154, 74, 74, 74, ]), 'block': (
    [7, 16, 17, 20, 28, 37, 38, 90, 102, 134, 163, 166, 171, 172, 186, ],
    [18, 27, 32, 39, 32, 32, 81, 135, 32, 160, 32, 32, 184, 185, 189, ]), 'default': ([125, ], [153, ]),
                  'initializer_list': ([83, 155, ], [128, 175, ]), 'expressions': (
    [34, 36, 52, 64, 66, 76, 77, 78, 94, 109, 110, 111, 148, 162, 170, ],
    [71, 79, 100, 112, 115, 119, 122, 123, 137, 122, 144, 145, 169, 178, 183, ]), 'pair': (
    [48, 49, 50, 51, 53, 55, 56, 57, 64, 65, 68, 69, 73, 98, 103, ],
    [95, 96, 97, 99, 101, 104, 105, 106, 113, 114, 116, 117, 118, 138, 140, ]), 'declarator_list': ([11, ], [25, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
    ('program -> PROGRAM ID declarations_list procedure_list MAIN block', 'program', 6, 'p_program', 'parser.py', 13),
    ('program -> PROGRAM ID procedure_list MAIN block', 'program', 5, 'p_program', 'parser.py', 14),
    ('program -> PROGRAM ID declarations_list MAIN block', 'program', 5, 'p_program', 'parser.py', 15),
    ('program -> PROGRAM ID MAIN block', 'program', 4, 'p_program', 'parser.py', 16),
    ('declarations_list -> declarations', 'declarations_list', 1, 'p_declarations_list', 'parser.py', 21),
    ('declarations_list -> declarations_list declarations', 'declarations_list', 2, 'p_declarations_list', 'parser.py',
     22),
    ('declarations -> type_specifiers declarator_list SEMICOLON', 'declarations', 3, 'p_declarations', 'parser.py', 27),
    ('type_specifiers -> INT', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 32),
    ('type_specifiers -> REAL', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 33),
    ('type_specifiers -> CHAR', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 34),
    ('type_specifiers -> BOOLEAN', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 35),
    ('declarator_list -> declarator', 'declarator_list', 1, 'p_declarator_list', 'parser.py', 40),
    ('declarator_list -> declarator_list COMMA declarator', 'declarator_list', 3, 'p_declarator_list', 'parser.py', 41),
    ('declarator -> dec', 'declarator', 1, 'p_declarator', 'parser.py', 46),
    ('declarator -> dec ASSIGNMENT_SIGN initializer', 'declarator', 3, 'p_declarator', 'parser.py', 47),
    ('dec -> ID', 'dec', 1, 'p_dec', 'parser.py', 52),
    ('dec -> ID LBRACK range RBRACK', 'dec', 4, 'p_dec', 'parser.py', 53),
    ('dec -> ID LBRACK NUMCONST RBRACK', 'dec', 4, 'p_dec', 'parser.py', 54),
    ('range -> ID DOUBLE_DOT ID', 'range', 3, 'p_range', 'parser.py', 59),
    ('range -> NUMCONST DOUBLE_DOT NUMCONST', 'range', 3, 'p_range', 'parser.py', 60),
    ('range -> arithmetic_expressions DOUBLE_DOT arithmetic_expressions', 'range', 3, 'p_range', 'parser.py', 61),
    ('initializer -> constant_expressions', 'initializer', 1, 'p_initializer', 'parser.py', 66),
    ('initializer -> LBRACE initializer_list RBRACE', 'initializer', 3, 'p_initializer', 'parser.py', 67),
    ('initializer_list -> constant_expressions COMMA initializer_list', 'initializer_list', 3, 'p_initializer_list',
     'parser.py', 72),
    ('initializer_list -> constant_expressions', 'initializer_list', 1, 'p_initializer_list', 'parser.py', 73),
    ('procedure_list -> procedure_list procedure_nt', 'procedure_list', 2, 'p_procedure_list', 'parser.py', 78),
    ('procedure_list -> procedure_nt', 'procedure_list', 1, 'p_procedure_list', 'parser.py', 79),
    ('procedure_nt -> PROCEDURE ID parameters LBRACE declarations_list block RBRACE SEMICOLON', 'procedure_nt', 8,
     'p_procedure', 'parser.py', 83),
    ('procedure_nt -> PROCEDURE ID parameters LBRACE block RBRACE SEMICOLON', 'procedure_nt', 7, 'p_procedure',
     'parser.py', 84),
    ('parameters -> LPAR declarations_list RPAR', 'parameters', 3, 'p_parameters', 'parser.py', 89),
    ('parameters -> LPAR RPAR', 'parameters', 2, 'p_parameters', 'parser.py', 90),
    ('block -> LBRACE statement_list RBRACE', 'block', 3, 'p_block', 'parser.py', 95),
    ('statement_list -> statement SEMICOLON', 'statement_list', 2, 'p_statement_list', 'parser.py', 100),
    ('statement_list -> statement_list statement SEMICOLON', 'statement_list', 3, 'p_statement_list', 'parser.py', 101),
    ('statement -> ID ASSIGNMENT_SIGN expressions', 'statement', 3, 'p_statement', 'parser.py', 106),
    ('statement -> IF bool_expressions THEN statement', 'statement', 4, 'p_statement', 'parser.py', 107),
    ('statement -> IF bool_expressions THEN statement ELSE statement', 'statement', 6, 'p_statement', 'parser.py', 108),
    ('statement -> DO statement WHILE bool_expressions', 'statement', 4, 'p_statement', 'parser.py', 109),
    ('statement -> FOR ID ASSIGNMENT_SIGN counter DO statement', 'statement', 6, 'p_statement', 'parser.py', 110),
    ('statement -> SWITCH expressions case_element default END', 'statement', 5, 'p_statement', 'parser.py', 111),
    ('statement -> ID LPAR arguments_list RPAR', 'statement', 4, 'p_statement', 'parser.py', 112),
    (
    'statement -> ID LBRACK expressions RBRACK ASSIGNMENT_SIGN expressions', 'statement', 6, 'p_statement', 'parser.py',
    113),
    ('statement -> RETURN expressions', 'statement', 2, 'p_statement', 'parser.py', 114),
    ('statement -> EXIT WHEN bool_expressions', 'statement', 3, 'p_statement', 'parser.py', 115),
    ('statement -> block', 'statement', 1, 'p_statement', 'parser.py', 116),
    ('statement -> <empty>', 'statement', 0, 'p_statement', 'parser.py', 117),
    ('arguments_list -> multi_arguments', 'arguments_list', 1, 'p_arguments_list', 'parser.py', 122),
    ('arguments_list -> <empty>', 'arguments_list', 0, 'p_arguments_list', 'parser.py', 123),
    ('multi_arguments -> multi_arguments COMMA expressions', 'multi_arguments', 3, 'p_multi_arguments', 'parser.py',
     128),
    ('multi_arguments -> expressions', 'multi_arguments', 1, 'p_multi_arguments', 'parser.py', 129),
    ('counter -> NUMCONST UPTO NUMCONST', 'counter', 3, 'p_counter', 'parser.py', 134),
    ('counter -> NUMCONST DOWNTO NUMCONST', 'counter', 3, 'p_counter', 'parser.py', 135),
    ('case_element -> CASE NUMCONST COLON block', 'case_element', 4, 'p_case_element', 'parser.py', 140),
    ('case_element -> case_element CASE NUMCONST COLON block', 'case_element', 5, 'p_case_element', 'parser.py', 141),
    ('default -> DEFAULT COLON block', 'default', 3, 'p_default', 'parser.py', 146),
    ('default -> <empty>', 'default', 0, 'p_default', 'parser.py', 147),
    ('expressions -> constant_expressions', 'expressions', 1, 'p_expressions', 'parser.py', 152),
    ('expressions -> bool_expressions', 'expressions', 1, 'p_expressions', 'parser.py', 153),
    ('expressions -> arithmetic_expressions', 'expressions', 1, 'p_expressions', 'parser.py', 154),
    ('expressions -> ID', 'expressions', 1, 'p_expressions', 'parser.py', 155),
    ('expressions -> ID LBRACK expressions RBRACK', 'expressions', 4, 'p_expressions', 'parser.py', 156),
    ('expressions -> ID LPAR arguments_list RPAR', 'expressions', 4, 'p_expressions', 'parser.py', 157),
    ('expressions -> LPAR expressions RPAR', 'expressions', 3, 'p_expressions', 'parser.py', 158),
    ('constant_expressions -> NUMCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 163),
    ('constant_expressions -> REALCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 164),
    ('constant_expressions -> CHARCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 165),
    ('constant_expressions -> BOOLCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 166),
    ('bool_expressions -> LT pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 171),
    ('bool_expressions -> LE pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 172),
    ('bool_expressions -> GT pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 173),
    ('bool_expressions -> GE pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 174),
    ('bool_expressions -> EQ pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 175),
    ('bool_expressions -> NEQ pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 176),
    ('bool_expressions -> AND pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 177),
    ('bool_expressions -> OR pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 178),
    ('bool_expressions -> AND THEN pair', 'bool_expressions', 3, 'p_bool_expressions', 'parser.py', 179),
    ('bool_expressions -> OR ELSE pair', 'bool_expressions', 3, 'p_bool_expressions', 'parser.py', 180),
    ('bool_expressions -> NOT expressions', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 181),
    ('arithmetic_expressions -> PLUS pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 186),
    ('arithmetic_expressions -> MINUS pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 187),
    ('arithmetic_expressions -> MULT pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 188),
    ('arithmetic_expressions -> DIV pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 189),
    ('arithmetic_expressions -> MOD pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 190),
    (
    'arithmetic_expressions -> MINUS expressions', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py',
    191),
    ('pair -> LPAR expressions COMMA expressions RPAR', 'pair', 5, 'p_pair', 'parser.py', 196),
]
