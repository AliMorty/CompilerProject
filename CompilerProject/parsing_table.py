
# parsing_table.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightELSETHENID NUMCONST REALCONST BOOLCONST CHARCONST LT LE GT GE EQ NEQ LPAR RPAR LBRACK RBRACK LBRACE RBRACE PLUS MINUS MULT DIV MOD ASSIGNMENT_SIGN SEMICOLON DOUBLE_DOT COMMA COLON INT CASE END IF MAIN UPTO DOWNTO ELSE THEN PROGRAM DEFAULT AND PROCEDURE CHAR WHILE REAL WHEN NOT FOR EXIT BOOLEAN RETURN DO SWITCH ORprogram      : PROGRAM ID declarations_list procedure_list MAIN block\n                    | PROGRAM ID procedure_list MAIN block\n                    | PROGRAM ID declarations_list MAIN block\n                    | PROGRAM ID MAIN blockdeclarations_list    : declarations \n                            | declarations_list declarationsdeclarations     : type_specifiers declarator_list SEMICOLONtype_specifiers      : INT\n                            | REAL\n                            | CHAR\n                            | BOOLEANdeclarator_list      : declarator\n                            | declarator_list COMMA declaratordeclarator       : dec\n                        | dec ASSIGNMENT_SIGN initializerdec      : ID\n                | ID LBRACK range RBRACK\n                | ID LBRACK NUMCONST RBRACKrange        : ID DOUBLE_DOT ID\n                    | NUMCONST DOUBLE_DOT NUMCONST\n                    | arithmetic_expressions DOUBLE_DOT arithmetic_expressionsinitializer      : constant_expressions\n                        | LBRACE initializer_list RBRACEinitializer_list     : constant_expressions COMMA initializer_list\n                            | constant_expressionsprocedure_list       : procedure_list procedure_nt\n                            | procedure_ntprocedure_nt         : PROCEDURE ID parameters LBRACE declarations_list block RBRACE SEMICOLON\n                            | PROCEDURE ID parameters LBRACE block RBRACE SEMICOLONparameters       : LPAR declarations_list RPAR\n                        | LPAR RPARblock        : LBRACE statement_list RBRACEstatement_list       : statement SEMICOLON\n                            | statement_list statement SEMICOLONstatement            : ID ASSIGNMENT_SIGN expressions\n                            | IF bool_expressions THEN statement\n                            | IF bool_expressions THEN statement ELSE statement\n                            | DO statement WHILE bool_expressions\n                            | FOR ID ASSIGNMENT_SIGN counter DO statement\n                            | SWITCH expressions case_element default END\n                            | ID LPAR arguments_list RPAR\n                            | ID LBRACK expressions RBRACK ASSIGNMENT_SIGN expressions\n                            | RETURN expressions\n                            | EXIT WHEN bool_expressions\n                            | block\n                            | arguments_list       : multi_arguments\n                            | multi_arguments      : multi_arguments COMMA expressions \n                            | expressionscounter      : NUMCONST UPTO NUMCONST \n                    | NUMCONST DOWNTO NUMCONSTcase_element     : CASE NUMCONST COLON block\n                        | case_element CASE NUMCONST COLON blockdefault      : DEFAULT COLON block \n                    | expressions      : constant_expressions \n                        | bool_expressions \n                        | arithmetic_expressions\n                        | ID \n                        | ID LBRACK expressions RBRACK \n                        | ID LPAR arguments_list RPAR \n                        | LPAR expressions RPARconstant_expressions     : NUMCONST \n                                | REALCONST \n                                | CHARCONST \n                                | BOOLCONSTbool_expressions     : LT pair \n                            | LE pair \n                            | GT pair \n                            | GE pair \n                            | EQ pair \n                            | NEQ pair \n                            | AND pair \n                            | OR pair \n                            | AND THEN pair \n                            | OR ELSE pair \n                            | NOT expressionsarithmetic_expressions       : PLUS pair \n                                    | MINUS pair \n                                    | MULT pair \n                                    | DIV pair \n                                    | MOD pair \n                                    | MINUS expressionspair     : LPAR expressions COMMA expressions RPAR'

_lr_action_items = {'INT': ([3, 7, 12, 22, 31, 35, 64, 66, 109, ], [5, 5, -5, -6, -7, 5, 5, 5, 5, ]), 'RPAR': (
[12, 22, 31, 35, 46, 49, 50, 51, 66, 73, 74, 76, 78, 79, 95, 99, 101, 102, 106, 107, 115, 116, 117, 118, 120, 122, 123,
 124, 125, 126, 130, 131, 132, 133, 143, 149, 150, 152, 153, 167, 168, 169, 178, 188, ],
[-5, -6, -7, 65, -67, -66, -64, -65, 110, -48, -58, -57, -60, -59, -81, -82, -79, -83, -80, -84, -47, 148, -50, -74,
 150, -48, -78, -71, -68, -75, -72, -73, -70, -69, 150, -76, -63, 169, -77, -49, -61, -62, 188, -85, ]), 'BOOLCONST': (
[28, 41, 42, 52, 61, 71, 72, 73, 77, 80, 96, 105, 121, 122, 137, 147, 163, 166, ],
[46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, ]), 'CASE': (
[46, 49, 50, 51, 68, 74, 76, 78, 79, 84, 95, 99, 101, 102, 106, 107, 118, 123, 124, 125, 126, 128, 130, 131, 132, 133,
 149, 150, 153, 168, 169, 183, 188, 189, ],
[-67, -66, -64, -65, -32, -58, -57, -60, -59, 129, -81, -82, -79, -83, -80, -84, -74, -78, -71, -68, -75, 156, -72, -73,
 -70, -69, -76, -63, -77, -61, -62, -53, -85, -54, ]), 'DEFAULT': ([68, 128, 183, 189, ], [-32, 155, -53, -54, ]),
                    'MAIN': (
                    [3, 4, 7, 10, 12, 15, 21, 22, 31, 164, 179, ], [13, 16, 23, -27, -5, -26, 32, -6, -7, -29, -28, ]),
                    'ELSE': (
                    [40, 46, 49, 50, 51, 68, 74, 76, 78, 79, 83, 89, 95, 99, 101, 102, 106, 107, 112, 113, 118, 123,
                     124, 125, 126, 130, 131, 132, 133, 135, 148, 149, 150, 153, 158, 159, 168, 169, 170, 174, 177, 180,
                     184, 187, 188, ],
                    [-45, -67, -66, -64, -65, -32, -58, -57, -60, -59, 127, -43, -81, -82, -79, -83, -80, -84, -44, -35,
                     -74, -78, -71, -68, -75, -72, -73, -70, -69, -46, -41, -76, -63, -77, -38, 174, -61, -62, -40, -46,
                     -46, -42, -37, -39, -85, ]), 'NOT': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, ]),
                    'COLON': ([155, 157, 172, ], [171, 173, 182, ]),
                    '$end': ([1, 25, 27, 33, 63, 68, ], [0, -4, -2, -3, -1, -32, ]), 'MULT': (
    [29, 41, 42, 61, 71, 72, 73, 77, 80, 96, 97, 105, 121, 122, 147, 163, 166, ],
    [53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, ]), 'REALCONST': (
    [28, 41, 42, 52, 61, 71, 72, 73, 77, 80, 96, 105, 121, 122, 137, 147, 163, 166, ],
    [51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, ]), 'LE': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, ]), 'WHEN': ([38, ], [70, ]), 'PLUS': (
    [29, 41, 42, 61, 71, 72, 73, 77, 80, 96, 97, 105, 121, 122, 147, 163, 166, ],
    [58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, ]),
                    'RETURN': ([26, 36, 43, 69, 111, 135, 174, 177, ], [42, 42, 42, -33, -34, 42, 42, 42, ]),
                    'DOWNTO': ([160, ], [175, ]), 'DOUBLE_DOT': (
    [46, 49, 50, 51, 54, 57, 60, 74, 76, 78, 79, 95, 99, 101, 102, 106, 107, 118, 123, 124, 125, 126, 130, 131, 132,
     133, 149, 150, 153, 168, 169, 188, ],
    [-67, -66, -64, -65, 97, 100, 104, -58, -57, -60, -59, -81, -82, -79, -83, -80, -84, -74, -78, -71, -68, -75, -72,
     -73, -70, -69, -76, -63, -77, -61, -62, -85, ]),
                    'IF': ([26, 36, 43, 69, 111, 135, 174, 177, ], [44, 44, 44, -33, -34, 44, 44, 44, ]),
                    'SWITCH': ([26, 36, 43, 69, 111, 135, 174, 177, ], [41, 41, 41, -33, -34, 41, 41, 41, ]), 'DIV': (
    [29, 41, 42, 61, 71, 72, 73, 77, 80, 96, 97, 105, 121, 122, 147, 163, 166, ],
    [56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, ]), 'NEQ': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, ]), 'LBRACE': (
    [12, 13, 16, 22, 23, 26, 28, 31, 32, 34, 36, 43, 64, 65, 69, 109, 110, 111, 135, 171, 173, 174, 177, 182, ],
    [-5, 26, 26, -6, 26, 26, 52, -7, 26, 64, 26, 26, 26, -31, -33, 26, -30, -34, 26, 26, 26, 26, 26, 26, ]), 'RBRACK': (
    [46, 49, 50, 51, 55, 60, 74, 76, 78, 79, 95, 99, 101, 102, 106, 107, 114, 118, 123, 124, 125, 126, 130, 131, 132,
     133, 140, 141, 142, 149, 150, 151, 153, 168, 169, 188, ],
    [-67, -66, -64, -65, 98, 103, -58, -57, -60, -59, -81, -82, -79, -83, -80, -84, 146, -74, -78, -71, -68, -75, -72,
     -73, -70, -69, -21, -19, -20, -76, -63, 168, -77, -61, -62, -85, ]),
                    'EXIT': ([26, 36, 43, 69, 111, 135, 174, 177, ], [38, 38, 38, -33, -34, 38, 38, 38, ]), 'WHILE': (
    [40, 43, 46, 49, 50, 51, 68, 74, 76, 78, 79, 89, 90, 95, 99, 101, 102, 106, 107, 112, 113, 118, 123, 124, 125, 126,
     130, 131, 132, 133, 135, 148, 149, 150, 153, 158, 159, 168, 169, 170, 174, 177, 180, 184, 187, 188, ],
    [-45, -46, -67, -66, -64, -65, -32, -58, -57, -60, -59, -43, 134, -81, -82, -79, -83, -80, -84, -44, -35, -74, -78,
     -71, -68, -75, -72, -73, -70, -69, -46, -41, -76, -63, -77, -38, -36, -61, -62, -40, -46, -46, -42, -37, -39,
     -85, ]), 'MINUS': ([29, 41, 42, 61, 71, 72, 73, 77, 80, 96, 97, 105, 121, 122, 147, 163, 166, ],
                        [61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, ]), 'CHARCONST': (
    [28, 41, 42, 52, 61, 71, 72, 73, 77, 80, 96, 105, 121, 122, 137, 147, 163, 166, ],
    [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, ]),
                    'REAL': ([3, 7, 12, 22, 31, 35, 64, 66, 109, ], [8, 8, -5, -6, -7, 8, 8, 8, 8, ]), 'PROCEDURE': (
    [3, 4, 7, 10, 12, 15, 21, 22, 31, 164, 179, ], [9, 9, 9, -27, -5, -26, 9, -6, -7, -29, -28, ]),
                    'PROGRAM': ([0, ], [2, ]), 'RBRACE': ([36, 46, 49, 50, 51, 68, 69, 93, 94, 108, 111, 145, 162, ],
                                                          [68, -67, -66, -64, -65, -32, -33, -25, 138, 144, -34, 165,
                                                           -24, ]),
                    'BOOLEAN': ([3, 7, 12, 22, 31, 35, 64, 66, 109, ], [11, 11, -5, -6, -7, 11, 11, 11, 11, ]), 'AND': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, ]),
                    'ASSIGNMENT_SIGN': ([18, 19, 39, 92, 98, 103, 146, ], [28, -16, 71, 136, -17, -18, 166, ]),
                    'LPAR': (
                    [24, 39, 41, 42, 53, 56, 58, 59, 61, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 87, 88, 96,
                     105, 119, 121, 122, 127, 147, 163, 166, ],
                    [35, 73, 77, 77, 96, 96, 96, 96, 105, 77, 77, 77, 96, 77, 122, 77, 96, 96, 96, 96, 96, 96, 96, 77,
                     77, 96, 77, 77, 96, 77, 77, 77, ]), 'MOD': (
    [29, 41, 42, 61, 71, 72, 73, 77, 80, 96, 97, 105, 121, 122, 147, 163, 166, ],
    [59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, ]), 'ID': (
    [2, 5, 6, 8, 9, 11, 14, 26, 29, 30, 36, 41, 42, 43, 45, 61, 69, 71, 72, 73, 77, 80, 96, 100, 105, 111, 121, 122,
     135, 147, 163, 166, 174, 177, ],
    [3, -8, 19, -9, 24, -11, -10, 39, 57, 19, 39, 78, 78, 39, 92, 78, -33, 78, 78, 78, 78, 78, 78, 141, 78, -34, 78, 78,
     39, 78, 78, 78, 39, 39, ]), 'THEN': (
    [46, 49, 50, 51, 74, 75, 76, 78, 79, 91, 95, 99, 101, 102, 106, 107, 118, 123, 124, 125, 126, 130, 131, 132, 133,
     149, 150, 153, 168, 169, 188, ],
    [-67, -66, -64, -65, -58, 119, -57, -60, -59, 135, -81, -82, -79, -83, -80, -84, -74, -78, -71, -68, -75, -72, -73,
     -70, -69, -76, -63, -77, -61, -62, -85, ]), 'GE': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, ]), 'LT': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, ]), 'SEMICOLON': (
    [17, 18, 19, 20, 26, 36, 37, 40, 46, 47, 48, 49, 50, 51, 62, 67, 68, 69, 74, 76, 78, 79, 89, 95, 98, 99, 101, 102,
     103, 106, 107, 111, 112, 113, 118, 123, 124, 125, 126, 130, 131, 132, 133, 135, 138, 144, 148, 149, 150, 153, 158,
     159, 165, 168, 169, 170, 174, 177, 180, 184, 187, 188, ],
    [-12, -14, -16, 31, -46, -46, 69, -45, -67, -15, -22, -66, -64, -65, -13, 111, -32, -33, -58, -57, -60, -59, -43,
     -81, -17, -82, -79, -83, -18, -80, -84, -34, -44, -35, -74, -78, -71, -68, -75, -72, -73, -70, -69, -46, -23, 164,
     -41, -76, -63, -77, -38, -36, 179, -61, -62, -40, -46, -46, -42, -37, -39, -85, ]), 'OR': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, ]), 'EQ': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, ]),
                    'FOR': ([26, 36, 43, 69, 111, 135, 174, 177, ], [45, 45, 45, -33, -34, 45, 45, 45, ]), 'DO': (
    [26, 36, 43, 69, 111, 135, 161, 174, 177, 185, 186, ], [43, 43, 43, -33, -34, 43, 177, 43, 43, -52, -51, ]), 'GT': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, ]), 'COMMA': (
    [17, 18, 19, 20, 46, 47, 48, 49, 50, 51, 62, 74, 76, 78, 79, 93, 95, 98, 99, 101, 102, 103, 106, 107, 115, 117, 118,
     123, 124, 125, 126, 130, 131, 132, 133, 138, 139, 143, 149, 150, 153, 167, 168, 169, 188, ],
    [-12, -14, -16, 30, -67, -15, -22, -66, -64, -65, -13, -58, -57, -60, -59, 137, -81, -17, -82, -79, -83, -18, -80,
     -84, 147, -50, -74, -78, -71, -68, -75, -72, -73, -70, -69, -23, 163, 163, -76, -63, -77, -49, -61, -62, -85, ]),
                    'UPTO': ([160, ], [176, ]), 'LBRACK': ([19, 39, 78, ], [29, 72, 121, ]),
                    'CHAR': ([3, 7, 12, 22, 31, 35, 64, 66, 109, ], [14, 14, -5, -6, -7, 14, 14, 14, 14, ]),
                    'NUMCONST': (
                    [28, 29, 41, 42, 52, 61, 71, 72, 73, 77, 80, 96, 104, 105, 121, 122, 129, 136, 137, 147, 156, 163,
                     166, 175, 176, ],
                    [50, 60, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 142, 50, 50, 50, 157, 160, 50, 50, 172, 50, 50,
                     185, 186, ]), 'END': ([68, 128, 154, 181, 183, 189, ], [-32, -56, 170, -55, -53, -54, ]), }

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'procedure_list': ([3, 7, ], [4, 21, ]), 'constant_expressions': (
[28, 41, 42, 52, 61, 71, 72, 73, 77, 80, 96, 105, 121, 122, 137, 147, 163, 166, ],
[48, 76, 76, 93, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 93, 76, 76, 76, ]), 'dec': ([6, 30, ], [18, 18, ]),
                  'declarations_list': ([3, 35, 64, ], [7, 66, 109, ]), 'bool_expressions': (
    [41, 42, 44, 61, 70, 71, 72, 73, 77, 80, 96, 105, 121, 122, 134, 147, 163, 166, ],
    [74, 74, 91, 74, 112, 74, 74, 74, 74, 74, 74, 74, 74, 74, 158, 74, 74, 74, ]),
                  'declarator': ([6, 30, ], [17, 62, ]), 'program': ([0, ], [1, ]), 'initializer': ([28, ], [47, ]),
                  'parameters': ([24, ], [34, ]), 'arithmetic_expressions': (
    [29, 41, 42, 61, 71, 72, 73, 77, 80, 96, 97, 105, 121, 122, 147, 163, 166, ],
    [54, 79, 79, 79, 79, 79, 79, 79, 79, 79, 140, 79, 79, 79, 79, 79, 79, ]),
                  'initializer_list': ([52, 137, ], [94, 162, ]),
                  'statement': ([26, 36, 43, 135, 174, 177, ], [37, 67, 90, 159, 184, 187, ]),
                  'multi_arguments': ([73, 122, ], [115, 115, ]), 'statement_list': ([26, ], [36, ]),
                  'range': ([29, ], [55, ]), 'block': (
    [13, 16, 23, 26, 32, 36, 43, 64, 109, 135, 171, 173, 174, 177, 182, ],
    [25, 27, 33, 40, 63, 40, 40, 108, 145, 40, 181, 183, 40, 40, 189, ]), 'pair': (
    [53, 56, 58, 59, 61, 75, 81, 82, 83, 85, 86, 87, 88, 119, 127, ],
    [95, 99, 101, 102, 106, 118, 124, 125, 126, 130, 131, 132, 133, 149, 153, ]),
                  'type_specifiers': ([3, 7, 35, 64, 66, 109, ], [6, 6, 6, 6, 6, 6, ]),
                  'arguments_list': ([73, 122, ], [116, 152, ]), 'expressions': (
    [41, 42, 61, 71, 72, 73, 77, 80, 96, 105, 121, 122, 147, 163, 166, ],
    [84, 89, 107, 113, 114, 117, 120, 123, 139, 143, 151, 117, 167, 178, 180, ]), 'counter': ([136, ], [161, ]),
                  'procedure_nt': ([3, 4, 7, 21, ], [10, 15, 10, 15, ]), 'default': ([128, ], [154, ]),
                  'declarations': ([3, 7, 35, 64, 66, 109, ], [12, 22, 12, 12, 22, 22, ]),
                  'case_element': ([84, ], [128, ]), 'declarator_list': ([6, ], [20, ]), }

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
    ('program -> PROGRAM ID declarations_list procedure_list MAIN block', 'program', 6, 'p_program', 'parser.py', 13),
    ('program -> PROGRAM ID procedure_list MAIN block', 'program', 5, 'p_program', 'parser.py', 14),
    ('program -> PROGRAM ID declarations_list MAIN block', 'program', 5, 'p_program', 'parser.py', 15),
    ('program -> PROGRAM ID MAIN block', 'program', 4, 'p_program', 'parser.py', 16),
    ('declarations_list -> declarations', 'declarations_list', 1, 'p_declarations_list', 'parser.py', 21),
    ('declarations_list -> declarations_list declarations', 'declarations_list', 2, 'p_declarations_list', 'parser.py',
     22),
    ('declarations -> type_specifiers declarator_list SEMICOLON', 'declarations', 3, 'p_declarations', 'parser.py', 27),
    ('type_specifiers -> INT', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 32),
    ('type_specifiers -> REAL', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 33),
    ('type_specifiers -> CHAR', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 34),
    ('type_specifiers -> BOOLEAN', 'type_specifiers', 1, 'p_type_specifiers', 'parser.py', 35),
    ('declarator_list -> declarator', 'declarator_list', 1, 'p_declarator_list', 'parser.py', 40),
    ('declarator_list -> declarator_list COMMA declarator', 'declarator_list', 3, 'p_declarator_list', 'parser.py', 41),
    ('declarator -> dec', 'declarator', 1, 'p_declarator', 'parser.py', 46),
    ('declarator -> dec ASSIGNMENT_SIGN initializer', 'declarator', 3, 'p_declarator', 'parser.py', 47),
    ('dec -> ID', 'dec', 1, 'p_dec', 'parser.py', 52),
    ('dec -> ID LBRACK range RBRACK', 'dec', 4, 'p_dec', 'parser.py', 53),
    ('dec -> ID LBRACK NUMCONST RBRACK', 'dec', 4, 'p_dec', 'parser.py', 54),
    ('range -> ID DOUBLE_DOT ID', 'range', 3, 'p_range', 'parser.py', 59),
    ('range -> NUMCONST DOUBLE_DOT NUMCONST', 'range', 3, 'p_range', 'parser.py', 60),
    ('range -> arithmetic_expressions DOUBLE_DOT arithmetic_expressions', 'range', 3, 'p_range', 'parser.py', 61),
    ('initializer -> constant_expressions', 'initializer', 1, 'p_initializer', 'parser.py', 66),
    ('initializer -> LBRACE initializer_list RBRACE', 'initializer', 3, 'p_initializer', 'parser.py', 67),
    ('initializer_list -> constant_expressions COMMA initializer_list', 'initializer_list', 3, 'p_initializer_list',
     'parser.py', 72),
    ('initializer_list -> constant_expressions', 'initializer_list', 1, 'p_initializer_list', 'parser.py', 73),
    ('procedure_list -> procedure_list procedure_nt', 'procedure_list', 2, 'p_procedure_list', 'parser.py', 78),
    ('procedure_list -> procedure_nt', 'procedure_list', 1, 'p_procedure_list', 'parser.py', 79),
    ('procedure_nt -> PROCEDURE ID parameters LBRACE declarations_list block RBRACE SEMICOLON', 'procedure_nt', 8,
     'p_procedure', 'parser.py', 83),
    ('procedure_nt -> PROCEDURE ID parameters LBRACE block RBRACE SEMICOLON', 'procedure_nt', 7, 'p_procedure',
     'parser.py', 84),
    ('parameters -> LPAR declarations_list RPAR', 'parameters', 3, 'p_parameters', 'parser.py', 89),
    ('parameters -> LPAR RPAR', 'parameters', 2, 'p_parameters', 'parser.py', 90),
    ('block -> LBRACE statement_list RBRACE', 'block', 3, 'p_block', 'parser.py', 95),
    ('statement_list -> statement SEMICOLON', 'statement_list', 2, 'p_statement_list', 'parser.py', 100),
    ('statement_list -> statement_list statement SEMICOLON', 'statement_list', 3, 'p_statement_list', 'parser.py', 101),
    ('statement -> ID ASSIGNMENT_SIGN expressions', 'statement', 3, 'p_statement', 'parser.py', 106),
    ('statement -> IF bool_expressions THEN statement', 'statement', 4, 'p_statement', 'parser.py', 107),
    ('statement -> IF bool_expressions THEN statement ELSE statement', 'statement', 6, 'p_statement', 'parser.py', 108),
    ('statement -> DO statement WHILE bool_expressions', 'statement', 4, 'p_statement', 'parser.py', 109),
    ('statement -> FOR ID ASSIGNMENT_SIGN counter DO statement', 'statement', 6, 'p_statement', 'parser.py', 110),
    ('statement -> SWITCH expressions case_element default END', 'statement', 5, 'p_statement', 'parser.py', 111),
    ('statement -> ID LPAR arguments_list RPAR', 'statement', 4, 'p_statement', 'parser.py', 112),
    (
    'statement -> ID LBRACK expressions RBRACK ASSIGNMENT_SIGN expressions', 'statement', 6, 'p_statement', 'parser.py',
    113),
    ('statement -> RETURN expressions', 'statement', 2, 'p_statement', 'parser.py', 114),
    ('statement -> EXIT WHEN bool_expressions', 'statement', 3, 'p_statement', 'parser.py', 115),
    ('statement -> block', 'statement', 1, 'p_statement', 'parser.py', 116),
    ('statement -> <empty>', 'statement', 0, 'p_statement', 'parser.py', 117),
    ('arguments_list -> multi_arguments', 'arguments_list', 1, 'p_arguments_list', 'parser.py', 122),
    ('arguments_list -> <empty>', 'arguments_list', 0, 'p_arguments_list', 'parser.py', 123),
    ('multi_arguments -> multi_arguments COMMA expressions', 'multi_arguments', 3, 'p_multi_arguments', 'parser.py',
     128),
    ('multi_arguments -> expressions', 'multi_arguments', 1, 'p_multi_arguments', 'parser.py', 129),
    ('counter -> NUMCONST UPTO NUMCONST', 'counter', 3, 'p_counter', 'parser.py', 134),
    ('counter -> NUMCONST DOWNTO NUMCONST', 'counter', 3, 'p_counter', 'parser.py', 135),
    ('case_element -> CASE NUMCONST COLON block', 'case_element', 4, 'p_case_element', 'parser.py', 140),
    ('case_element -> case_element CASE NUMCONST COLON block', 'case_element', 5, 'p_case_element', 'parser.py', 141),
    ('default -> DEFAULT COLON block', 'default', 3, 'p_default', 'parser.py', 146),
    ('default -> <empty>', 'default', 0, 'p_default', 'parser.py', 147),
    ('expressions -> constant_expressions', 'expressions', 1, 'p_expressions', 'parser.py', 152),
    ('expressions -> bool_expressions', 'expressions', 1, 'p_expressions', 'parser.py', 153),
    ('expressions -> arithmetic_expressions', 'expressions', 1, 'p_expressions', 'parser.py', 154),
    ('expressions -> ID', 'expressions', 1, 'p_expressions', 'parser.py', 155),
    ('expressions -> ID LBRACK expressions RBRACK', 'expressions', 4, 'p_expressions', 'parser.py', 156),
    ('expressions -> ID LPAR arguments_list RPAR', 'expressions', 4, 'p_expressions', 'parser.py', 157),
    ('expressions -> LPAR expressions RPAR', 'expressions', 3, 'p_expressions', 'parser.py', 158),
    ('constant_expressions -> NUMCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 163),
    ('constant_expressions -> REALCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 164),
    ('constant_expressions -> CHARCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 165),
    ('constant_expressions -> BOOLCONST', 'constant_expressions', 1, 'p_constant_expressions', 'parser.py', 166),
    ('bool_expressions -> LT pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 171),
    ('bool_expressions -> LE pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 172),
    ('bool_expressions -> GT pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 173),
    ('bool_expressions -> GE pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 174),
    ('bool_expressions -> EQ pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 175),
    ('bool_expressions -> NEQ pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 176),
    ('bool_expressions -> AND pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 177),
    ('bool_expressions -> OR pair', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 178),
    ('bool_expressions -> AND THEN pair', 'bool_expressions', 3, 'p_bool_expressions', 'parser.py', 179),
    ('bool_expressions -> OR ELSE pair', 'bool_expressions', 3, 'p_bool_expressions', 'parser.py', 180),
    ('bool_expressions -> NOT expressions', 'bool_expressions', 2, 'p_bool_expressions', 'parser.py', 181),
    ('arithmetic_expressions -> PLUS pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 186),
    ('arithmetic_expressions -> MINUS pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 187),
    ('arithmetic_expressions -> MULT pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 188),
    ('arithmetic_expressions -> DIV pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 189),
    ('arithmetic_expressions -> MOD pair', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py', 190),
    (
    'arithmetic_expressions -> MINUS expressions', 'arithmetic_expressions', 2, 'p_arithmetic_expressions', 'parser.py',
    191),
    ('pair -> LPAR expressions COMMA expressions RPAR', 'pair', 5, 'p_pair', 'parser.py', 196),
]
